// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  created_at      String
  updated_at      String
  Users_has_Roles Users_has_Roles[]
  Cart            Cart[]
  Order           Order[]
}

model Roles {
  id                    Int                     @id @default(autoincrement())
  name                  String
  Roles_has_Permissions Roles_has_Permissions[]
  Users_has_Roles       Users_has_Roles[]
}

model Permissions {
  id                    Int                     @id @default(autoincrement())
  name                  String
  Roles_has_Permissions Roles_has_Permissions[]
}

//many to many
model Roles_has_Permissions {
  role         Roles       @relation(fields: [roleId], references: [id])
  roleId       Int
  permissions  Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int
  assignedAt   DateTime?   @default(now())
  assignedBy   String

  @@id([roleId, permissionId])
}

model Users_has_Roles {
  users      Users     @relation(fields: [userId], references: [id])
  userId     Int
  roles      Roles     @relation(fields: [roleId], references: [id])
  roleId     Int       @default(2)
  assignedAt DateTime? @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Products {
  id                   Int                    @id @default(autoincrement())
  name                 String
  price                Float
  image                String                 @default("")
  description          String?
  Quantity             Int                    @default(0)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now())
  deletedAt            DateTime?
  ProductsOnCategories ProductsOnCategories[]
  Cart                 Cart[]
  Order                Order[]
}

model Categories {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now())
  deletedAt            DateTime?
  description          String?
  ProductsOnCategories ProductsOnCategories[]
}

model ProductsOnCategories {
  productId  Products   @relation(fields: [p_Id], references: [id])
  p_Id       Int
  categoryId Categories @relation(fields: [c_Id], references: [id])
  c_Id       Int
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @default(now())

  @@id([p_Id, c_Id])
}

model Cart {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  total     Int
}

model Order {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  total     Int
}
